//
//  DetailBikeViewController.swift
//  findBike
//
//  Created by Israel on 2/15/19.
//  Copyright (c) 2019 Israel. All rights reserved.
//
//  This file was generated by the 🐍 VIPER generator
//

import UIKit
import MapKit

final class DetailBikeViewController: UIViewController {

    @IBOutlet weak var mapView: MKMapView!
    
    @IBOutlet weak var lblNumSlots: UILabel!
    @IBOutlet weak var lblNumBike: UILabel!
    @IBOutlet weak var lblNombre: UILabel!
    @IBOutlet weak var viewDeta: UIView!
    
    let regionRadius: CLLocationDistance = 1500
    
    // MARK: - Public properties -
    var datos: StationView!
    var arrStationsNear:[StationView]!
    var presenter: DetailBikePresenterInterface!

    // MARK: - Lifecycle -

    override func viewDidLoad() {
        super.viewDidLoad()
        
        let imageView = UIImageView(frame: CGRect(x: 0, y: 0, width: 30, height: 30))
        imageView.image = UIImage(named: "logo")
        imageView.contentMode = .scaleAspectFit
        self.navigationItem.titleView = imageView
        self.navigationController?.title = "Pruebas"
        self.navigationController?.navigationBar.barTintColor = UIColor(red: 113/255, green: 40/255, blue: 140/255, alpha: 1.0)
        
        viewDeta.layer.cornerRadius = 16
        viewDeta.clipsToBounds = true
        
        lblNombre.text = datos.direccion
        lblNumBike.text = datos.disponible?.bikes!.description
        lblNumSlots.text = datos.disponible?.slots!.description
        
        let lat = datos.location?.lat!
        let lon = datos.location?.lon!
        
        let initialLocation = CLLocation(latitude: CLLocationDegrees(exactly: lat!)!, longitude: CLLocationDegrees(exactly: lon!)!)
        
        centerMapOnLocation(location: initialLocation)
        
        let stationBike = StationBike(title: datos.name!,
                              locationName: datos.direccion!,
                              discipline: datos.estatus!,
                              coordinate: CLLocationCoordinate2D(latitude: CLLocationDegrees(exactly: lat!)!, longitude: CLLocationDegrees(exactly: lon!)!))
        
        mapView.delegate = self
        mapView.addAnnotation(stationBike)
        
        for mark in arrStationsNear{
            
            let lat = mark.location?.lat!
            let lon = mark.location?.lon!
            
            let stationBike = StationBike(title: mark.name!,
                                          locationName: mark.direccion!,
                                          discipline: mark.estatus!,
                                          coordinate: CLLocationCoordinate2D(latitude: CLLocationDegrees(exactly: lat!)!, longitude: CLLocationDegrees(exactly: lon!)!))
            
            mapView.addAnnotation(stationBike)
            
        }
        
        
        
    }
    
    func centerMapOnLocation(location: CLLocation) {
        let coordinateRegion = MKCoordinateRegion(center: location.coordinate,
                                                  latitudinalMeters: regionRadius, longitudinalMeters: regionRadius)
        mapView.setRegion(coordinateRegion, animated: true)
    }
	
    
    func changeTitleAndDescription(title:String, numberBike:String, numberStations:String, attributedTitle:NSAttributedString) {
        
        UIView.animate(withDuration: 0.3, delay: 0.1, options: .curveEaseInOut, animations:{
            self.lblNombre.alpha = 0
        },completion:
            {
                (finished) in
                
                if !attributedTitle.string.isEmpty{
                    self.lblNombre.attributedText = attributedTitle
                }else{
                    self.lblNombre.text = title
                }
                
                UIView.animate(withDuration: 0.3, delay: 0.1, options: .curveEaseInOut, animations:
                    {
                        self.lblNombre.alpha = 1
                },completion:nil)
                
        })
        
        UIView.animate(withDuration: 0.3, delay: 0, options: .curveEaseInOut, animations:
            {
                self.lblNumBike.alpha = 0
        }, completion:
            {
                (finished) in
                
                self.lblNumBike.text = numberBike
                UIView.animate(withDuration: 0.3, delay: 0.1, options: .curveEaseInOut, animations:
                    {
                        self.lblNumBike.alpha = 1
                }, completion:nil)
        })
        
        
        UIView.animate(withDuration: 0.3, delay: 0, options: .curveEaseInOut, animations:
            {
                self.lblNumSlots.alpha = 0
        }, completion:
            {
                (finished) in
                
                self.lblNumSlots.text = numberStations
                UIView.animate(withDuration: 0.3, delay: 0.1, options: .curveEaseInOut, animations:
                    {
                        self.lblNumSlots.alpha = 1
                }, completion:nil)
        })
        
    }
    
    
    
}

// MARK: - Extensions -

extension DetailBikeViewController: DetailBikeViewInterface {
}

extension DetailBikeViewController: MKMapViewDelegate {
    // 1
    func mapView(_ mapView: MKMapView, viewFor annotation: MKAnnotation) -> MKAnnotationView? {
        // 2
        guard let annotation = annotation as? StationBike else { return nil }
        // 3
        let identifier = "marker"
        var view: MKMarkerAnnotationView
        // 4
        if let dequeuedView = mapView.dequeueReusableAnnotationView(withIdentifier: identifier)
            as? MKMarkerAnnotationView {
            dequeuedView.annotation = annotation
            view = dequeuedView
        } else {
            // 5
            view = MKMarkerAnnotationView(annotation: annotation, reuseIdentifier: identifier)
            view.canShowCallout = true
            view.calloutOffset = CGPoint(x: -5, y: 5)
            view.rightCalloutAccessoryView = UIButton(type: .detailDisclosure)
            if annotation.title == self.datos.name{
                view.markerTintColor = UIColor(red: 113/255, green: 40/255, blue: 140/255, alpha: 1.0)
            }else{
                view.markerTintColor = UIColor.green
            }
        }
        return view
    }
    
    func mapView(_ mapView: MKMapView, annotationView view: MKAnnotationView,
                 calloutAccessoryControlTapped control: UIControl) {
        let location = view.annotation as! StationBike
        let launchOptions = [MKLaunchOptionsDirectionsModeKey: MKLaunchOptionsDirectionsModeDriving]
        location.mapItem().openInMaps(launchOptions: launchOptions)
    }
    
    func mapView(_ mapView: MKMapView, didSelect view: MKAnnotationView) {
        
        guard let annotation = view.annotation as? StationBike else { return }
        if annotation.title == self.datos.name{
            
//            lblNombre.text = datos.direccion
//            lblNumBike.text = datos.disponible?.bikes!.description
//            lblNumSlots.text = datos.disponible?.slots!.description
//
            changeTitleAndDescription(title: datos!.direccion!, numberBike: (datos!.disponible?.bikes!.description)!, numberStations: (datos!.disponible?.slots!.description)!, attributedTitle: NSAttributedString())
            
        }else{
            
            let station = arrStationsNear.filter { (station) -> Bool in
                station.name == annotation.title
            }.first
            
            changeTitleAndDescription(title: station!.direccion!, numberBike: (station!.disponible?.bikes!.description)!, numberStations: (station!.disponible?.slots!.description)!, attributedTitle: NSAttributedString())
            
//            lblNombre.text = station!.direccion
//            lblNumBike.text = station!.disponible?.bikes!.description
//            lblNumSlots.text = station!.disponible?.slots!.description
            
        }
    }


}
